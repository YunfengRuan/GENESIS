deltanew = crossprod(r)
delta0 = deltanew
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = A%*%d
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
# if(i%%50==0){r = b -A%*%x}
# else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
}
}
x
xtrue
eps
Meps
x = cg(rnorm(10), b, A,0.1,100)
x = cg(rnorm(10), b, A,0.01,100)
x
xtrue
cbind(x,xtrue)
source('~/Dropbox/2018_02_DPsummary/code/testtest/cg04262018_test.R', echo=TRUE)
plot(x,xtrue)
x=rnorm(10)
x
K = length(x)
Ax = A%*%x
r = b-Ax
d = r
deltanew = crossprod(r)
delta0 = deltanew
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = A%*%d
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
if(i%%50==0){r = b -A%*%x}
else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
}
}
x
xtrue
cbind(x,xtrue)
plot(x,xtrue)
# ------------------------------------------------
# Update on 04/26/2018
# Created on 04/24/2018
# ------------------------------------------------
cg <- function(x, b, A, eps, Meps){
K = length(x)
Ax = A%*%x
r = b-Ax
d = r
deltanew = crossprod(r)
delta0 = deltanew
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = A%*%d
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
if(i%%50==0){r = b -A%*%x}
else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
}
}
return(x)
}
set.seed(21234)
A = matrix(0,10,10)
for(i in 1:10){
for(j in i:10){
A[i,j] = rnorm(1)
}
for(j in 1:i){
A[i,j] = A[j,i]
}
}
det(A)
b = rnorm(10)
xtrue = solve(A)%*%b
x = cg(rnorm(10), b, A,0.01,100)
cbind(x,xtrue)
rm(list=ls())
library(data.table)
library(Rcpp)
setwd("~/Dropbox/2018_02_DPsummary/code/testtest/")
# ------------------------------------------------
# load the LD information file
# load(file="/dcl01/chatterj/data/yzhang/Data_ldscore/1000G_EUR_Phase3_MAF05_hm3only_pairwiseLD/pairwiseLD_1000G_EUR_Phase3_MAF05_hm3only_LDwindow1MB_cuoff0.1.RData")
load("pairwiseLD_1000G_EUR_Phase3_MAF05_hm3only_LDwindow1MB_cuoff0.1.RData")
n = 100e3
K = length(Nstar)
M = K
# ------------------------------------------------# ------------------------------------------------
# Simulation: generate data.
# ------------------------------------------------# ------------------------------------------------
pic = 5e-3
sigmasq = 0.3/(M*pic)
a = 2e-6
par_true = c(pic,sigmasq,a)
iter=1
set.seed(iter*123)
z = rbinom(K, size=1, prob=pic); nonzero = sum(z)
betajoint = rep(0, K)
betajoint[which(z==1)] = rnorm(nonzero,mean=0,sd=sqrt(sigmasq))
# ------------------------------------------------
betamarginal = rep(0,K);
for(k in 1:K){
betamarginal[k] = crossprod(betajoint[unlist(TaggingSNPinx[k])], (unlist(pairwise_r[k]))) #+rnorm(1,mean=0,sd=sqrt(a))
}
load(file=paste0("~/Dropbox/2016_06_Gene_revision/code_final_realdata/GENESIS/data/error_iter",iter,".RData"))
dftem = data.frame(cbind(error,SNP)); dftem0= data.frame(SNPrsID)
dfmerge = merge(dftem0, dftem, by.x="SNPrsID", by.y="SNP",sort=F)
betahat = betamarginal + as.numeric(as.character(dfmerge$error))/sqrt(n)
varbetahat = rep(1/n,K)
# ------------------------------------------------
chisq <- (betahat/sqrt(varbetahat))^2
tem <- ldscore*mean(1/varbetahat)/K
ld.fit <- lm(chisq ~ tem)
ld.fit
sum(betajoint^2)
# -------------------------
# ------------------------------------------------# ------------------------------------------------
# Testing code start here!!!
# ------------------------------------------------# ------------------------------------------------
source("GENESIS_simu.R")
betamarginal.post = posteriormean_marginal(par_true, c0=5, betahat,varbetahat,ldscore,Nstar)
mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)cg <- function(x, b, A, eps, Meps){
K = length(x)
Ax = A%*%x
r = b-Ax
d = r
deltanew = crossprod(r)
delta0 = deltanew
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = A%*%d
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
if(i%%50==0){r = b -A%*%x}
else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
}
}
return(x)
}
b = betamarginal
x = betajoint
K = length(x)
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b-Ax
r
summary(r)
# ------------------------------------------------
# Update on 04/26/2018
# Created on 04/24/2018
# ------------------------------------------------
cg <- function(x, b, A, eps, Meps){
K = length(x)
Ax = A%*%x
r = b-Ax
d = r
deltanew = crossprod(r)
delta0 = deltanew
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = A%*%d
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
if(i%%50==0){r = b -A%*%x}
else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
}
}
return(x)
}
set.seed(21234)
A = matrix(0,10,10)
for(i in 1:10){
for(j in i:10){
A[i,j] = rnorm(1)
}
for(j in 1:i){
A[i,j] = A[j,i]
}
}
det(A)
b = rnorm(10)
xtrue = solve(A)%*%b
x = cg(rnorm(10), b, A,0.01,100)
cbind(x,xtrue)
x = cg(rep(0,10), b, A,0.01,100)
cbind(x,xtrue)
source('~/Dropbox/2018_02_DPsummary/code/testtest/cg04262018.r', echo=TRUE)
x=rep(0,K)
b = betamarginal
K = length(x)
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b-Ax
d = r
deltanew = crossprod(r)
delta0 = deltanew
deltanew
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = mapply(function(inx,value){sum(value*d[inx])}, TaggingSNPinx, pairwise_r)
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
if(i%%50==0){
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b - Ax
}
else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
}
}
eps =.1
Meps=100
K = length(x)
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b-Ax
d = r
deltanew = crossprod(r)
delta0 = deltanew
deltanew
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = mapply(function(inx,value){sum(value*d[inx])}, TaggingSNPinx, pairwise_r)
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
if(i%%50==0){
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b - Ax
}
else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
}
}
inx = which(betajoint!=0)
plot(x[inx], betajoint[inx])
abline(0,1)
points(x[inx], betajoint[inx])
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = mapply(function(inx,value){sum(value*d[inx])}, TaggingSNPinx, pairwise_r)
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
if(i%%50==0){
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b - Ax
}
else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
points(x[inx], betajoint[inx])
}
}
plot(x[inx], betajoint[inx])
abline(0,1)
source("cg04262018.r")
betajoint.post = cg(x=rep(0,K), betamarginal, TaggingSNPinx, pairwise_r, eps=1e-1, Meps=1000)
eps
eps^2*delta0
eps=.5
eps^2*delta0
eps=.2
eps^2*delta0
x = rep(0,K)
b = betamarginal
K = length(x)
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b-Ax
d = r
deltanew = crossprod(r)
delta0 = deltanew
deltanew
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = mapply(function(inx,value){sum(value*d[inx])}, TaggingSNPinx, pairwise_r)
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
if(i%%50==0){
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b - Ax
}
else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
}
}
eps= .3
eps^2*delta0
eps=.2
K = length(x)
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b-Ax
d = r
deltanew = crossprod(r)
delta0 = deltanew
deltanew
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = mapply(function(inx,value){sum(value*d[inx])}, TaggingSNPinx, pairwise_r)
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
if(i%%50==0){
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b - Ax
}
else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
}
}
eps^2*delta0
eps=.25
eps^2*delta0
eps=.3
K = length(x)
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b-Ax
d = r
deltanew = crossprod(r)
delta0 = deltanew
deltanew
for(i in 1:Meps){
if(deltanew>eps^2*delta0){
Ad = mapply(function(inx,value){sum(value*d[inx])}, TaggingSNPinx, pairwise_r)
q = Ad
alpha = deltanew/crossprod(d,q)
x = x+as.numeric(alpha)*d
if(i%%50==0){
Ax = mapply(function(inx,value){sum(value*x[inx])}, TaggingSNPinx, pairwise_r)
r = b - Ax
}
else
{r = r - as.numeric(alpha)*q}
deltaold = deltanew
deltanew = crossprod(r,r)
beta = deltanew/deltaold
d = r+as.numeric(beta)*d
print(c(deltanew))
}
}
plot(x[inx], betajoint[inx])
abline(0,1)
par(mfrow=c(1,1))
plot(x[inx], betajoint[inx])
abline(0,1)
plot(x[inx], betajoint[inx],xlim=(-0.04, 0.04),ylim=c(-0.04, 0.04))
plot(x[inx], betajoint[inx],xlim=c(-0.04, 0.04),ylim=c(-0.04, 0.04))
abline(0,1)
M = 1e6
pic = 0.01
p1 = 0.1
sig1 = 1.5e-4; sig2 = (0.3/(pic*M)-(p1*sig1))/(1-p1)
a = 2e-6
par_true = c(pic,p1, sig1, sig2,a)
par_true
sig1
sig
sig2
sig1/sig2
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/table_est.R', echo=TRUE)
length(traitlist)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/table_est.R', echo=TRUE)
setwd("~/Dropbox/2018_02_cancer/CrossCancer/code/figures")
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F2pdf_causal.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/F3projection.R', echo=TRUE)
source('~/Dropbox/2018_02_cancer/CrossCancer/code/figures/table_tail.R', echo=TRUE)
# ------------------------------------------------
#   Update on 05/01/2018
#   Created on 01/18/2018
#
#   Author: Yan (Dora) Zhang
#   Email: yandorazhang@gmail.com
# ------------------------------------------------
#1. generate the template
# nothing in the folder.
setwd("~/Dropbox/2016_06_Gene_revision/code_final_realdata/")
library(devtools)
library(Rcpp)
library(RcppArmadillo)
library(roxygen2)
setwd("GENESIS/")
compileAttributes(verbose=TRUE)
if(stratification==true){new_sig(1)=0;}
getwd()
setwd("~/Dropbox/2016_06_Gene_revision/code_final_realdata/")
library(devtools)
library(Rcpp)
library(RcppArmadillo)
library(roxygen2)
# RcppArmadillo.package.skeleton(name="GENESIS",example_code=F,
#                                code_files=c("EffectSizeGWAS/src/EM_EM.cpp"))
# 2. put the EM_EM.cpp under /src directory; delete files under /R directory.
# generate RcppExports.cpp
setwd("GENESIS/")
compileAttributes(verbose=TRUE)
# ------------------------------------------------
#   Update on 05/01/2018
#   Created on 01/18/2018
#
#   Author: Yan (Dora) Zhang
#   Email: yandorazhang@gmail.com
# ------------------------------------------------
#1. generate the template
# nothing in the folder.
setwd("~/Dropbox/2016_06_Gene_revision/")
# ------------------------------------------------
#   Update on 05/01/2018
#   Created on 01/18/2018
#
#   Author: Yan (Dora) Zhang
#   Email: yandorazhang@gmail.com
# ------------------------------------------------
#1. generate the template
# nothing in the folder.
setwd("~/Dropbox/2016_06_Gene_revision/")
library(devtools)
library(Rcpp)
library(RcppArmadillo)
library(roxygen2)
RcppArmadillo.package.skeleton(name="GENESIS",example_code=F,
code_files=c("code_final_realdata/GENESIS/src/EM_EM.cpp"))
# 2. put the EM_EM.cpp under /src directory; delete files under /R directory.
# generate RcppExports.cpp
setwd("GENESIS/")
compileAttributes(verbose=TRUE)
compileAttributes(verbose=TRUE)
RcppArmadillo.package.skeleton(name="GENESIS",example_code=F,
code_files=c("code_final_realdata/GENESIS/src/EM_EM.cpp"))
setwd("GENESIS/")
compileAttributes(verbose=TRUE)
setwd("~/Dropbox/2016_06_Gene_revision/code_final_realdata/")
library(devtools)
library(Rcpp)
library(RcppArmadillo)
library(roxygen2)
# 2. put the EM_EM.cpp under /src directory; delete files under /R directory.
# generate RcppExports.cpp
setwd("GENESIS/")
compileAttributes(verbose=TRUE)
